# -*- coding: utf-8 -*-
"""Final score.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I_a4LMyn6sFjLiq6wnDKLFgYoXFCiNxr
"""



import pandas as pd
import numpy as np

# Load your CSV data
co_occurrence_df = pd.read_csv('/content/cleaned_ingredient_pairsv2.csv')
occurrence_df = pd.read_csv('/content/cleaned_ingredient_frequency.csv')

# Function to calculate compatibility score for target ingredient k in a given recipe

def calculate_compatibility_score(target_ingredient, recipe_ingredients, co_occurrence_df, occurrence_df):
    # Convert co-occurrence data to a more accessible format
    co_occurrence_dict = {}
    for _, row in co_occurrence_df.iterrows():
        pair = row['Ingredient Pair'].split(', ')
        ingredient1, ingredient2 = pair[0], pair[1]
        freq = row['Frequency']
        if ingredient1 not in co_occurrence_dict:
            co_occurrence_dict[ingredient1] = {}
        if ingredient2 not in co_occurrence_dict:
            co_occurrence_dict[ingredient2] = {}
        co_occurrence_dict[ingredient1][ingredient2] = freq
        co_occurrence_dict[ingredient2][ingredient1] = freq

    score = 1.0
    for ingredient in recipe_ingredients:
        if target_ingredient in co_occurrence_dict and ingredient in co_occurrence_dict[target_ingredient]:
            co_occurrence_freq = co_occurrence_dict[target_ingredient][ingredient]
            ingredient_occurrence = occurrence_df.loc[occurrence_df['Ingredient'] == ingredient, 'Frequency'].values


            if len(ingredient_occurrence) > 0:
                ingredient_occurrence = ingredient_occurrence[0]
                if ingredient_occurrence > 0:
                    score *= co_occurrence_freq / ingredient_occurrence
                else:
                    score *= 0.0001  # Small value to handle rare or missing data
            else:
                score *= 0.0001

    target_occurrence = occurrence_df.loc[occurrence_df['Ingredient'] == target_ingredient, 'Frequency'].values
    if len(target_occurrence) > 0:
        target_occurrence = target_occurrence[0]
        final_score = score * target_occurrence
    else:
        final_score = score * 0.0001

    return final_score

# Function to calculate GM score for all alternative ingredients
def calculate_gm_scores(alternative_ingredients, recipe_ingredients, co_occurrence_df, occurrence_df):

    gm_scores = {}
    total_score = sum(calculate_compatibility_score(alt_ingredient, recipe_ingredients, co_occurrence_df, occurrence_df)
                  for alt_ingredient in alternative_ingredients)


    for alt_ingredient in alternative_ingredients:
        alt_score = calculate_compatibility_score(alt_ingredient, recipe_ingredients, co_occurrence_df, occurrence_df)
        if total_score > 0:
            gm_score = alt_score / total_score
        else:
            gm_score = 0
        gm_scores[alt_ingredient] = gm_score

    return gm_scores

# recipe_ingredients = ['onion', 'garlic', 'tomato', 'Cumin', 'soy sauce','ginger','egg']
# replace_ingredient=['milk']
# alternative_ingredients = ['butter', 'olive oil', 'coconut oil',]

recipe_ingredients = ['chili powder', 'cumin', 'onion', 'garlic','ginger']
replace_ingredient=['chicken']
alternative_ingredients = ['lamb', 'turkey', 'pork']


gm_scores = calculate_gm_scores(alternative_ingredients, recipe_ingredients, co_occurrence_df, occurrence_df)


print("GM Scores for alternative ingredients:")
for ingredient, score in gm_scores.items():
    print(f"{ingredient}: {score:.4f}")

best_alternative = max(gm_scores, key=gm_scores.get)
print(f"\nBest alternative ingredient: {best_alternative} with GM score of {gm_scores[best_alternative]:.4f}")

